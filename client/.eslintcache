[{"/home/karmel/Desktop/WORK/monsteranalyzer/client/src/App.js":"1","/home/karmel/Desktop/WORK/monsteranalyzer/client/src/pages/landingPage/landingPage.styles.jsx":"2","/home/karmel/Desktop/WORK/monsteranalyzer/client/src/components/swiper/swiper.component.jsx":"3","/home/karmel/Desktop/WORK/monsteranalyzer/client/src/components/card/card.component.jsx":"4","/home/karmel/Desktop/WORK/monsteranalyzer/client/src/reportWebVitals.js":"5","/home/karmel/Desktop/WORK/monsteranalyzer/client/src/components/form/form.component.jsx":"6","/home/karmel/Desktop/WORK/monsteranalyzer/client/src/components/card/card.styles.jsx":"7","/home/karmel/Desktop/WORK/monsteranalyzer/client/src/pages/settingPage/settingPage.component.jsx":"8","/home/karmel/Desktop/WORK/monsteranalyzer/client/src/index.js":"9","/home/karmel/Desktop/WORK/monsteranalyzer/client/src/pages/landingPage/landingPage.component.jsx":"10","/home/karmel/Desktop/WORK/monsteranalyzer/client/src/components/selection/selection.styles.jsx":"11","/home/karmel/Desktop/WORK/monsteranalyzer/client/src/components/selection/selection.component.jsx":"12","/home/karmel/Desktop/WORK/monsteranalyzer/client/src/components/startBtn/startBtn.compoenet.jsx":"13","/home/karmel/Desktop/WORK/monsteranalyzer/client/src/components/startBtn/startBtn.styles.jsx":"14"},{"size":423,"mtime":1608910576805,"results":"15","hashOfConfig":"16"},{"size":430,"mtime":1608403090097,"results":"17","hashOfConfig":"16"},{"size":1447,"mtime":1608670631647,"results":"18","hashOfConfig":"16"},{"size":1125,"mtime":1608913592814,"results":"19","hashOfConfig":"16"},{"size":362,"mtime":1608324080653,"results":"20","hashOfConfig":"16"},{"size":912,"mtime":1608917613909,"results":"21","hashOfConfig":"16"},{"size":366,"mtime":1608909903718,"results":"22","hashOfConfig":"16"},{"size":1923,"mtime":1608916912887,"results":"23","hashOfConfig":"16"},{"size":500,"mtime":1608324080653,"results":"24","hashOfConfig":"16"},{"size":4238,"mtime":1608918691358,"results":"25","hashOfConfig":"16"},{"size":226,"mtime":1608401767375,"results":"26","hashOfConfig":"16"},{"size":1351,"mtime":1608917797828,"results":"27","hashOfConfig":"16"},{"size":418,"mtime":1608909903718,"results":"28","hashOfConfig":"16"},{"size":250,"mtime":1608909903718,"results":"29","hashOfConfig":"16"},{"filePath":"30","messages":"31","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0},"1782b0c",{"filePath":"32","messages":"33","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0},{"filePath":"34","messages":"35","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0},{"filePath":"36","messages":"37","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0},{"filePath":"38","messages":"39","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0},{"filePath":"40","messages":"41","errorCount":0,"warningCount":3,"fixableErrorCount":0,"fixableWarningCount":0,"source":"42","usedDeprecatedRules":"43"},{"filePath":"44","messages":"45","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0},{"filePath":"46","messages":"47","errorCount":0,"warningCount":3,"fixableErrorCount":0,"fixableWarningCount":0,"source":"48","usedDeprecatedRules":"49"},{"filePath":"50","messages":"51","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"52"},{"filePath":"53","messages":"54","errorCount":0,"warningCount":1,"fixableErrorCount":0,"fixableWarningCount":0,"source":"55"},{"filePath":"56","messages":"57","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0},{"filePath":"58","messages":"59","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0},{"filePath":"60","messages":"61","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0},{"filePath":"62","messages":"63","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0},"/home/karmel/Desktop/WORK/monsteranalyzer/client/src/App.js",[],"/home/karmel/Desktop/WORK/monsteranalyzer/client/src/pages/landingPage/landingPage.styles.jsx",[],"/home/karmel/Desktop/WORK/monsteranalyzer/client/src/components/swiper/swiper.component.jsx",[],"/home/karmel/Desktop/WORK/monsteranalyzer/client/src/components/card/card.component.jsx",[],"/home/karmel/Desktop/WORK/monsteranalyzer/client/src/reportWebVitals.js",[],"/home/karmel/Desktop/WORK/monsteranalyzer/client/src/components/form/form.component.jsx",["64","65","66"],"import React, { Fragment, useState } from 'react';\nimport Selection from '../selection/selection.component';\nimport StartBtn from '../startBtn/startBtn.compoenet';\nimport { Button, Grid, Link } from '@material-ui/core';\nimport SettingPage from '../../pages/settingPage/settingPage.component';\n\nconst Form = ({ handleClick , hidden}) => {\n  return (\n    <Fragment>\n      <Grid container item xs={12} justify=\"center\">\n        <Grid container item justify=\"center\">\n          <Selection hidden={hidden}/>\n          <StartBtn />\n        </Grid>\n        <Grid item container justify=\"center\">\n          <Button\n            onClick={handleClick}\n            variant=\"contained\"\n            style={{\n              color: '#3BB7E3',\n              marginLeft: 100,\n            }}\n          >\n            {'Custom Settings'}\n          </Button>\n        </Grid>\n      </Grid>\n    </Fragment>\n  );\n};\n\nexport default Form;\n",["67","68"],"/home/karmel/Desktop/WORK/monsteranalyzer/client/src/components/card/card.styles.jsx",[],"/home/karmel/Desktop/WORK/monsteranalyzer/client/src/pages/settingPage/settingPage.component.jsx",["69","70","71"],"import React, { useState } from 'react';\nimport { Link } from 'react-router-dom';\nimport {\n  Button,\n  Dialog,\n  DialogActions,\n  DialogContent,\n  DialogTitle,\n  Slide,\n} from '@material-ui/core';\nimport CardSettingPage from '../../components/card/card.component';\nimport './settingPage.styles.css';\nimport useStyles from '../landingPage/landingPage.styles';\n\n// this is Fade in for the Dialog\nconst Transition = React.forwardRef(function Transition(props, ref) {\n  return <Slide direction=\"up\" ref={ref} {...props} />;\n});\n\nDialogContent.muiName = 'IconMenu';\n// this is to open Dialog for SettingPage\nexport default function SettingPage({\n  open,\n  handleClose,\n  networkSetting,\n  handleChange,\n  error,\n  handleSave,\n}) {\n  console.log(\"networking\",networkSetting);\n  return (\n    <div>\n      <Dialog\n        open={open}\n        TransitionComponent={Transition}\n        keepMounted\n        onClose={handleClose}\n        aria-labelledby=\"alert-dialog-slide-title\"\n        aria-describedby=\"alert-dialog-slide-description\"\n        maxWidth={false}\n        classes={{ paper: 'dialogContainer', root: 'dialog' }}\n      >\n        <DialogTitle\n          id=\"alert-dialog-slide-title\"\n          classes={{ root: 'dialogTitle' }}\n        >\n          {'Customize Network Setting'}\n        </DialogTitle>\n        <DialogContent classes={{ root: 'dialogContent' }}>\n          {networkSetting.map((value) => {\n            return (\n              <CardSettingPage\n                networkSetting={value}\n                handleChange={handleChange}\n                textError={error}\n              />\n            );\n          })}\n          <DialogActions classes={{ root: 'dialogAction' }}>\n            <Button onClick={handleSave} classes={{ root: 'saveBtn' }}>\n              Save Changes\n            </Button>\n          </DialogActions>\n        </DialogContent>\n        <div className=\"empty\"></div>\n      </Dialog>\n    </div>\n  );\n}\n",["72","73"],"/home/karmel/Desktop/WORK/monsteranalyzer/client/src/index.js",[],["74","75"],"/home/karmel/Desktop/WORK/monsteranalyzer/client/src/pages/landingPage/landingPage.component.jsx",["76"],"import React, { Fragment, useEffect, useRef, useState } from 'react';\nimport useStyles from './landingPage.styles.jsx';\nimport { Grid, Snackbar } from '@material-ui/core';\nimport logo from '../../assets/logo.png';\nimport SwiperText from '../../components/swiper/swiper.component.jsx';\nimport Form from '../../components/form/form.component';\nimport lottie from 'lottie-web';\nimport firstpageData from './firstpageData.json';\nimport SettingPage from '../settingPage/settingPage.component';\nimport MuiAlert from '@material-ui/lab/Alert';\n\n// cusomize the alert\nfunction Alert(props) {\n  return <MuiAlert elevation={6} variant=\"filled\" {...props} />;\n}\n\nconst LandingPage = () => {\n  const classes = useStyles();\n  const logoContainer = useRef(null);\n  useEffect(() => {\n    lottie.loadAnimation({\n      container: logoContainer.current, // the dom element that will contain the animation\n      renderer: 'svg',\n      loop: true,\n      autoplay: true,\n      animationData: firstpageData, // the path to the animation json\n    });\n  }, []);\n\n  const [open, setOpen] = React.useState(false);\n  // open & close the Dialog page\n  const handleClose = () => {\n    setOpen(false);\n  };\n  const handleClick = (event) => {\n    event.preventDefault();\n    setOpen(true);\n  };\n  // error of the fileds and the input of the fields\n  const [error, setError] = useState(false);\n  const [networkSetting, setNetworkSetting] = useState([\n    {\n      id: 1,\n      name: 'Network_Interface',\n      Network_Interface: '',\n    },\n    { id: 2, name: 'Filter', Filter: '' },\n    { id: 3, name: 'Gateway', Gateway: '' },\n  ]);\n\n  const [hidden, setHidden] = useState(false);\n\n  // when the user press SaveChanges of customized setting\n  const handleSave = (event) => {\n    event.preventDefault();\n\n    if (\n      [\n        networkSetting[0].Network_Interface,\n        networkSetting[1].Filter.length,\n        networkSetting[2].Gateway.length,\n      ].some((element) => element === '')\n    )\n      return setError(!error);\n    setHidden(true);\n    handleClose();\n    return setOpenAlert(true);\n  };\n\n  const [openAlert, setOpenAlert] = React.useState(false);\n  const handleAlertClose = (event, reason) => {\n    if (reason === 'clickaway') {\n      return;\n    }\n    setOpenAlert(false);\n  };\n\n  // when the user fill the fields of the customized setting page\n  const handleChange = (event) => {\n    event.preventDefault();\n    const { name, value } = event.target;\n    const index = event.target.id;\n    setNetworkSetting((PrevNetworkSetting) => {\n      const updateSetting = PrevNetworkSetting.map((item) => {\n        if (index === item.name) {\n          item[[name]] = value;\n        }\n\n        return item;\n      });\n\n      return updateSetting;\n    });\n  };\n  console.log(networkSetting, error);\n  return (\n    <Fragment>\n      <Grid\n        container\n        justify=\"space-between\"\n        id=\"WholeConatiner\"\n        className={classes.container}\n      >\n        <Grid\n          container\n          item\n          xs={12}\n          className={classes.section1}\n          justify=\"center\"\n          alignItems=\"center\"\n          id=\"section1\"\n        >\n          <div\n            id=\"logoContainer\"\n            style={{ width: '34%', margin: '0 auto' }}\n            ref={logoContainer}\n          ></div>\n        </Grid>\n        <Grid\n          container\n          item\n          justify=\"space-between\"\n          alignItems=\"center\"\n          xs={12}\n          className={classes.section2}\n          direction=\"row\"\n          id=\"section2\"\n        >\n          <Grid item xs={12}>\n            <SwiperText />\n          </Grid>\n          <Form handleClick={handleClick} hidden={hidden} />\n          <SettingPage\n            open={open}\n            handleClose={handleClose}\n            networkSetting={networkSetting}\n            handleChange={handleChange}\n            error={error}\n            handleSave={handleSave}\n          />\n        </Grid>\n      </Grid>\n      <Snackbar\n        open={openAlert}\n        autoHideDuration={6000}\n        onClose={handleAlertClose}\n      >\n        <Alert onClose={handleAlertClose} severity=\"success\">\n          The data has been saved!\n        </Alert>\n      </Snackbar>\n    </Fragment>\n  );\n};\n\nexport default LandingPage;\n","/home/karmel/Desktop/WORK/monsteranalyzer/client/src/components/selection/selection.styles.jsx",[],"/home/karmel/Desktop/WORK/monsteranalyzer/client/src/components/selection/selection.component.jsx",[],"/home/karmel/Desktop/WORK/monsteranalyzer/client/src/components/startBtn/startBtn.compoenet.jsx",[],"/home/karmel/Desktop/WORK/monsteranalyzer/client/src/components/startBtn/startBtn.styles.jsx",[],{"ruleId":"77","severity":1,"message":"78","line":1,"column":27,"nodeType":"79","messageId":"80","endLine":1,"endColumn":35},{"ruleId":"77","severity":1,"message":"81","line":4,"column":24,"nodeType":"79","messageId":"80","endLine":4,"endColumn":28},{"ruleId":"77","severity":1,"message":"82","line":5,"column":8,"nodeType":"79","messageId":"80","endLine":5,"endColumn":19},{"ruleId":"83","replacedBy":"84"},{"ruleId":"85","replacedBy":"86"},{"ruleId":"77","severity":1,"message":"78","line":1,"column":17,"nodeType":"79","messageId":"80","endLine":1,"endColumn":25},{"ruleId":"77","severity":1,"message":"81","line":2,"column":10,"nodeType":"79","messageId":"80","endLine":2,"endColumn":14},{"ruleId":"77","severity":1,"message":"87","line":13,"column":8,"nodeType":"79","messageId":"80","endLine":13,"endColumn":17},{"ruleId":"83","replacedBy":"88"},{"ruleId":"85","replacedBy":"89"},{"ruleId":"83","replacedBy":"90"},{"ruleId":"85","replacedBy":"91"},{"ruleId":"77","severity":1,"message":"92","line":4,"column":8,"nodeType":"79","messageId":"80","endLine":4,"endColumn":12},"no-unused-vars","'useState' is defined but never used.","Identifier","unusedVar","'Link' is defined but never used.","'SettingPage' is defined but never used.","no-native-reassign",["93"],"no-negated-in-lhs",["94"],"'useStyles' is defined but never used.",["93"],["94"],["93"],["94"],"'logo' is defined but never used.","no-global-assign","no-unsafe-negation"]